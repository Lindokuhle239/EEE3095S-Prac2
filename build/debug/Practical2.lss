
build/debug/Practical2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ae4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000ba4  08000ba4  00001ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000bd4  08000bd4  00001bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000bd8  08000bd8  00001bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08000bdc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2000000c  08000be8  0000200c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000002c  08000be8  0000202c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
  9 .comment      00000039  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002366  00000000  00000000  0000206d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000cde  00000000  00000000  000043d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000330  00000000  00000000  000050b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000214  00000000  00000000  000053e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000022d9  00000000  00000000  000055fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00000fc0  00000000  00000000  000078d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00000570  00000000  00000000  00008898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 000007fa  00000000  00000000  00008e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 000001a5  00000000  00000000  00009602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <vectors>:
 80000c0:	20002000 	.word	0x20002000
 80000c4:	080000c9 	.word	0x080000c9

080000c8 <ASM_Main>:

@ DO NOT EDIT label ASM_Main
ASM_Main:

	@ Some code is given below for you to start with
	LDR R0, RCC_BASE  		@ Enable clock for GPIOA and B by setting bit 17 and 18 in RCC_AHBENR
 80000c8:	4816      	ldr	r0, [pc, #88]	@ (8000124 <RCC_BASE>)
	LDR R1, [R0, #0x14]
 80000ca:	6941      	ldr	r1, [r0, #20]
	LDR R2, AHBENR_GPIOAB	@ AHBENR_GPIOAB is defined under LITERALS at the end of the code
 80000cc:	4a16      	ldr	r2, [pc, #88]	@ (8000128 <AHBENR_GPIOAB>)
	ORRS R1, R1, R2
 80000ce:	4311      	orrs	r1, r2
	STR R1, [R0, #0x14]
 80000d0:	6141      	str	r1, [r0, #20]

	LDR R0, GPIOA_BASE		@ Enable pull-up resistors for pushbuttons
 80000d2:	4816      	ldr	r0, [pc, #88]	@ (800012c <GPIOA_BASE>)
	MOVS R1, #0b01010101
 80000d4:	2155      	movs	r1, #85	@ 0x55
	STR R1, [R0, #0x0C]
 80000d6:	60c1      	str	r1, [r0, #12]
	LDR R1, GPIOB_BASE  	@ Set pins connected to LEDs to outputs
 80000d8:	4915      	ldr	r1, [pc, #84]	@ (8000130 <GPIOB_BASE>)
	LDR R2, MODER_OUTPUT
 80000da:	4a16      	ldr	r2, [pc, #88]	@ (8000134 <MODER_OUTPUT>)
	STR R2, [R1, #0]
 80000dc:	600a      	str	r2, [r1, #0]
	MOVS R2, #0         	@ NOTE: R2 will be dedicated to holding the value on the LEDs
 80000de:	2200      	movs	r2, #0

	MOVS R3, #1				@default increment = 1
 80000e0:	2301      	movs	r3, #1

080000e2 <main_loop>:

@ TODO: Add code, labels and logic for button checks and LED patterns

main_loop:
	@Read switch states
	LDR R4, GPIOA_BASE
 80000e2:	4c12      	ldr	r4, [pc, #72]	@ (800012c <GPIOA_BASE>)
	LDR R5, [R4, #0x10]		@r5 = idr value (input pins)
 80000e4:	6925      	ldr	r5, [r4, #16]

	@copy input state (PA0,..PA3)
	MOV R6, R5
 80000e6:	462e      	mov	r6, r5

	@reset and increment to default -> 1
	MOVS R3, #1
 80000e8:	2301      	movs	r3, #1

	@if SW0 is pressed -> increment by 2 while pressed
	MOVS R0, #1			@mask 0b0001
 80000ea:	2001      	movs	r0, #1
	ANDS R0, R6, R0		@R0 = (inputs & 0x01)
 80000ec:	4030      	ands	r0, r6
	CMP R0, #0
 80000ee:	2800      	cmp	r0, #0
	BNE check_sw1		@if not pressed -> skip
 80000f0:	d100      	bne.n	80000f4 <check_sw1>
	MOVS R3, #2			@increment by 2
 80000f2:	2302      	movs	r3, #2

080000f4 <check_sw1>:

check_sw1:
	@ while sw1 is pressed -> time should change every 0.3s
	LDR R7, LONG_DELAY_CNT	@default long delay (0.7s)
 80000f4:	4f10      	ldr	r7, [pc, #64]	@ (8000138 <LONG_DELAY_CNT>)
	MOVS R0, #2				@mask 0b0010
 80000f6:	2002      	movs	r0, #2
	ANDS R0, R6, R0
 80000f8:	4030      	ands	r0, r6
	CMP R0, #0
 80000fa:	2800      	cmp	r0, #0
	BNE check_sw2			@if not pressed -> keep long delay
 80000fc:	d100      	bne.n	8000100 <check_sw2>
	LDR R7, SHORT_DELAY_CNT	@if sw1 pressed -> short delay (0.3s)
 80000fe:	4f0f      	ldr	r7, [pc, #60]	@ (800013c <SHORT_DELAY_CNT>)

08000100 <check_sw2>:

check_sw2:
	@ while sw2 is pressed -> force 0xAA (170)
	MOVS R0, #4				@mask 0b0100
 8000100:	2004      	movs	r0, #4
	ANDS R0, R6, R0
 8000102:	4030      	ands	r0, r6
	CMP R0, #0
 8000104:	2800      	cmp	r0, #0
	BNE check_sw3			@if not pressed -> continue
 8000106:	d101      	bne.n	800010c <check_sw3>
	MOVS R2, #0xAA			@if pressed -> force pattern 0xAA (170)
 8000108:	22aa      	movs	r2, #170	@ 0xaa
	B write_leds
 800010a:	e006      	b.n	800011a <write_leds>

0800010c <check_sw3>:

check_sw3:
	@while sw3 is pressed -> freeze
	MOVS R0, #8				@mask 0b1000
 800010c:	2008      	movs	r0, #8
	ANDS R0, R6, R0
 800010e:	4030      	ands	r0, r6
	CMP R0, #0
 8000110:	2800      	cmp	r0, #0
	BNE do_increment		@if not pressed -> do increment
 8000112:	d100      	bne.n	8000116 <do_increment>
	B delay_loop			@if pressed -> freeze
 8000114:	e002      	b.n	800011c <delay_loop>

08000116 <do_increment>:

do_increment:
	ADDS R2, R2, R3		@R2 += increment
 8000116:	18d2      	adds	r2, r2, r3
	UXTB R2, R2 		@keep to 8 bits
 8000118:	b2d2      	uxtb	r2, r2

0800011a <write_leds>:

write_leds:
	STR R2, [R1, #0x14]	@write to GPIO_ODR (offset 0x14)
 800011a:	614a      	str	r2, [r1, #20]

0800011c <delay_loop>:

@simple software delay using r7 and r0 as loop counter
delay_loop:
	MOV R0, R7
 800011c:	4638      	mov	r0, r7

0800011e <delay_dec>:
delay_dec:
	SUBS R0, R0, #1
 800011e:	3801      	subs	r0, #1
	BNE delay_dec
 8000120:	d1fd      	bne.n	800011e <delay_dec>

	B main_loop
 8000122:	e7de      	b.n	80000e2 <main_loop>

08000124 <RCC_BASE>:
 8000124:	40021000 	.word	0x40021000

08000128 <AHBENR_GPIOAB>:
 8000128:	00060000 	.word	0x00060000

0800012c <GPIOA_BASE>:
 800012c:	48000000 	.word	0x48000000

08000130 <GPIOB_BASE>:
 8000130:	48000400 	.word	0x48000400

08000134 <MODER_OUTPUT>:
 8000134:	00005555 	.word	0x00005555

08000138 <LONG_DELAY_CNT>:
 8000138:	000f4240 	.word	0x000f4240

0800013c <SHORT_DELAY_CNT>:
 800013c:	00061a80 	.word	0x00061a80

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c06      	ldr	r4, [pc, #24]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d107      	bne.n	8000272 <__do_global_dtors_aux+0x1a>
 8000262:	4b05      	ldr	r3, [pc, #20]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000264:	2b00      	cmp	r3, #0
 8000266:	d002      	beq.n	800026e <__do_global_dtors_aux+0x16>
 8000268:	4804      	ldr	r0, [pc, #16]	@ (800027c <__do_global_dtors_aux+0x24>)
 800026a:	e000      	b.n	800026e <__do_global_dtors_aux+0x16>
 800026c:	bf00      	nop
 800026e:	2301      	movs	r3, #1
 8000270:	7023      	strb	r3, [r4, #0]
 8000272:	bd10      	pop	{r4, pc}
 8000274:	2000000c 	.word	0x2000000c
 8000278:	00000000 	.word	0x00000000
 800027c:	08000b8c 	.word	0x08000b8c

08000280 <frame_dummy>:
 8000280:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <frame_dummy+0x14>)
 8000282:	b510      	push	{r4, lr}
 8000284:	2b00      	cmp	r3, #0
 8000286:	d003      	beq.n	8000290 <frame_dummy+0x10>
 8000288:	4903      	ldr	r1, [pc, #12]	@ (8000298 <frame_dummy+0x18>)
 800028a:	4804      	ldr	r0, [pc, #16]	@ (800029c <frame_dummy+0x1c>)
 800028c:	e000      	b.n	8000290 <frame_dummy+0x10>
 800028e:	bf00      	nop
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)
 8000294:	00000000 	.word	0x00000000
 8000298:	20000010 	.word	0x20000010
 800029c:	08000b8c 	.word	0x08000b8c

080002a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a0:	b082      	sub	sp, #8
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002a2:	4b0a      	ldr	r3, [pc, #40]	@ (80002cc <MX_GPIO_Init+0x2c>)
 80002a4:	695a      	ldr	r2, [r3, #20]
 80002a6:	2180      	movs	r1, #128	@ 0x80
 80002a8:	03c9      	lsls	r1, r1, #15
 80002aa:	430a      	orrs	r2, r1
 80002ac:	615a      	str	r2, [r3, #20]
 80002ae:	695a      	ldr	r2, [r3, #20]
 80002b0:	400a      	ands	r2, r1
 80002b2:	9200      	str	r2, [sp, #0]
 80002b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b6:	695a      	ldr	r2, [r3, #20]
 80002b8:	2180      	movs	r1, #128	@ 0x80
 80002ba:	0289      	lsls	r1, r1, #10
 80002bc:	430a      	orrs	r2, r1
 80002be:	615a      	str	r2, [r3, #20]
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	400b      	ands	r3, r1
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	9b01      	ldr	r3, [sp, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002c8:	b002      	add	sp, #8
 80002ca:	4770      	bx	lr
 80002cc:	40021000 	.word	0x40021000

080002d0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002d0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002d2:	e7fe      	b.n	80002d2 <Error_Handler+0x2>

080002d4 <SystemClock_Config>:
{
 80002d4:	b510      	push	{r4, lr}
 80002d6:	b090      	sub	sp, #64	@ 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d8:	ac04      	add	r4, sp, #16
 80002da:	2230      	movs	r2, #48	@ 0x30
 80002dc:	2100      	movs	r1, #0
 80002de:	0020      	movs	r0, r4
 80002e0:	f000 fc27 	bl	8000b32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e4:	2210      	movs	r2, #16
 80002e6:	2100      	movs	r1, #0
 80002e8:	4668      	mov	r0, sp
 80002ea:	f000 fc22 	bl	8000b32 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ee:	2302      	movs	r3, #2
 80002f0:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f2:	3b01      	subs	r3, #1
 80002f4:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f6:	330f      	adds	r3, #15
 80002f8:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	0020      	movs	r0, r4
 80002fc:	f000 f8d4 	bl	80004a8 <HAL_RCC_OscConfig>
 8000300:	2800      	cmp	r0, #0
 8000302:	d10d      	bne.n	8000320 <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000304:	4668      	mov	r0, sp
 8000306:	2307      	movs	r3, #7
 8000308:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800030a:	2300      	movs	r3, #0
 800030c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000310:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000312:	2100      	movs	r1, #0
 8000314:	f000 fb40 	bl	8000998 <HAL_RCC_ClockConfig>
 8000318:	2800      	cmp	r0, #0
 800031a:	d103      	bne.n	8000324 <SystemClock_Config+0x50>
}
 800031c:	b010      	add	sp, #64	@ 0x40
 800031e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000320:	f7ff ffd6 	bl	80002d0 <Error_Handler>
    Error_Handler();
 8000324:	f7ff ffd4 	bl	80002d0 <Error_Handler>

08000328 <main>:
{
 8000328:	b510      	push	{r4, lr}
  HAL_Init();
 800032a:	f000 f82f 	bl	800038c <HAL_Init>
  ASM_Main();
 800032e:	f7ff fecb 	bl	80000c8 <ASM_Main>
  SystemClock_Config();
 8000332:	f7ff ffcf 	bl	80002d4 <SystemClock_Config>
  MX_GPIO_Init();
 8000336:	f7ff ffb3 	bl	80002a0 <MX_GPIO_Init>
  while (1)
 800033a:	e7fe      	b.n	800033a <main+0x12>

0800033c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800033c:	b510      	push	{r4, lr}
 800033e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000340:	4b0f      	ldr	r3, [pc, #60]	@ (8000380 <HAL_InitTick+0x44>)
 8000342:	7819      	ldrb	r1, [r3, #0]
 8000344:	20fa      	movs	r0, #250	@ 0xfa
 8000346:	0080      	lsls	r0, r0, #2
 8000348:	f7ff fefa 	bl	8000140 <__udivsi3>
 800034c:	0001      	movs	r1, r0
 800034e:	4b0d      	ldr	r3, [pc, #52]	@ (8000384 <HAL_InitTick+0x48>)
 8000350:	6818      	ldr	r0, [r3, #0]
 8000352:	f7ff fef5 	bl	8000140 <__udivsi3>
 8000356:	f000 f88b 	bl	8000470 <HAL_SYSTICK_Config>
 800035a:	2800      	cmp	r0, #0
 800035c:	d10d      	bne.n	800037a <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800035e:	2c03      	cmp	r4, #3
 8000360:	d901      	bls.n	8000366 <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000362:	2001      	movs	r0, #1
 8000364:	e00a      	b.n	800037c <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000366:	3001      	adds	r0, #1
 8000368:	2200      	movs	r2, #0
 800036a:	0021      	movs	r1, r4
 800036c:	4240      	negs	r0, r0
 800036e:	f000 f87b 	bl	8000468 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000372:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <HAL_InitTick+0x4c>)
 8000374:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 8000376:	2000      	movs	r0, #0
 8000378:	e000      	b.n	800037c <HAL_InitTick+0x40>
    return HAL_ERROR;
 800037a:	2001      	movs	r0, #1
}
 800037c:	bd10      	pop	{r4, pc}
 800037e:	46c0      	nop			@ (mov r8, r8)
 8000380:	20000000 	.word	0x20000000
 8000384:	20000008 	.word	0x20000008
 8000388:	20000004 	.word	0x20000004

0800038c <HAL_Init>:
{
 800038c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800038e:	4a06      	ldr	r2, [pc, #24]	@ (80003a8 <HAL_Init+0x1c>)
 8000390:	6813      	ldr	r3, [r2, #0]
 8000392:	2110      	movs	r1, #16
 8000394:	430b      	orrs	r3, r1
 8000396:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000398:	2003      	movs	r0, #3
 800039a:	f7ff ffcf 	bl	800033c <HAL_InitTick>
  HAL_MspInit();
 800039e:	f000 f86b 	bl	8000478 <HAL_MspInit>
}
 80003a2:	2000      	movs	r0, #0
 80003a4:	bd10      	pop	{r4, pc}
 80003a6:	46c0      	nop			@ (mov r8, r8)
 80003a8:	40022000 	.word	0x40022000

080003ac <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80003ac:	4a03      	ldr	r2, [pc, #12]	@ (80003bc <HAL_IncTick+0x10>)
 80003ae:	6811      	ldr	r1, [r2, #0]
 80003b0:	4b03      	ldr	r3, [pc, #12]	@ (80003c0 <HAL_IncTick+0x14>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	185b      	adds	r3, r3, r1
 80003b6:	6013      	str	r3, [r2, #0]
}
 80003b8:	4770      	bx	lr
 80003ba:	46c0      	nop			@ (mov r8, r8)
 80003bc:	20000028 	.word	0x20000028
 80003c0:	20000000 	.word	0x20000000

080003c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80003c4:	4b01      	ldr	r3, [pc, #4]	@ (80003cc <HAL_GetTick+0x8>)
 80003c6:	6818      	ldr	r0, [r3, #0]
}
 80003c8:	4770      	bx	lr
 80003ca:	46c0      	nop			@ (mov r8, r8)
 80003cc:	20000028 	.word	0x20000028

080003d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003d0:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 80003d2:	2800      	cmp	r0, #0
 80003d4:	db11      	blt.n	80003fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	4d13      	ldr	r5, [pc, #76]	@ (8000428 <__NVIC_SetPriority+0x58>)
 80003da:	33c0      	adds	r3, #192	@ 0xc0
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	595c      	ldr	r4, [r3, r5]
 80003e0:	2203      	movs	r2, #3
 80003e2:	4010      	ands	r0, r2
 80003e4:	00c0      	lsls	r0, r0, #3
 80003e6:	32fc      	adds	r2, #252	@ 0xfc
 80003e8:	0016      	movs	r6, r2
 80003ea:	4086      	lsls	r6, r0
 80003ec:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003ee:	0189      	lsls	r1, r1, #6
 80003f0:	400a      	ands	r2, r1
 80003f2:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003f4:	4322      	orrs	r2, r4
 80003f6:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80003f8:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003fa:	230f      	movs	r3, #15
 80003fc:	4003      	ands	r3, r0
 80003fe:	3b08      	subs	r3, #8
 8000400:	089b      	lsrs	r3, r3, #2
 8000402:	3306      	adds	r3, #6
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	4a09      	ldr	r2, [pc, #36]	@ (800042c <__NVIC_SetPriority+0x5c>)
 8000408:	4694      	mov	ip, r2
 800040a:	4463      	add	r3, ip
 800040c:	685c      	ldr	r4, [r3, #4]
 800040e:	2203      	movs	r2, #3
 8000410:	4010      	ands	r0, r2
 8000412:	00c0      	lsls	r0, r0, #3
 8000414:	32fc      	adds	r2, #252	@ 0xfc
 8000416:	0015      	movs	r5, r2
 8000418:	4085      	lsls	r5, r0
 800041a:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800041c:	0189      	lsls	r1, r1, #6
 800041e:	400a      	ands	r2, r1
 8000420:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000422:	4322      	orrs	r2, r4
 8000424:	605a      	str	r2, [r3, #4]
}
 8000426:	e7e7      	b.n	80003f8 <__NVIC_SetPriority+0x28>
 8000428:	e000e100 	.word	0xe000e100
 800042c:	e000ed00 	.word	0xe000ed00

08000430 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000430:	3801      	subs	r0, #1
 8000432:	2380      	movs	r3, #128	@ 0x80
 8000434:	045b      	lsls	r3, r3, #17
 8000436:	4298      	cmp	r0, r3
 8000438:	d20f      	bcs.n	800045a <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800043a:	4a09      	ldr	r2, [pc, #36]	@ (8000460 <SysTick_Config+0x30>)
 800043c:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800043e:	4809      	ldr	r0, [pc, #36]	@ (8000464 <SysTick_Config+0x34>)
 8000440:	6a03      	ldr	r3, [r0, #32]
 8000442:	021b      	lsls	r3, r3, #8
 8000444:	0a1b      	lsrs	r3, r3, #8
 8000446:	21c0      	movs	r1, #192	@ 0xc0
 8000448:	0609      	lsls	r1, r1, #24
 800044a:	430b      	orrs	r3, r1
 800044c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800044e:	2300      	movs	r3, #0
 8000450:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000452:	3307      	adds	r3, #7
 8000454:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000456:	2000      	movs	r0, #0
}
 8000458:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800045a:	2001      	movs	r0, #1
 800045c:	e7fc      	b.n	8000458 <SysTick_Config+0x28>
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	e000e010 	.word	0xe000e010
 8000464:	e000ed00 	.word	0xe000ed00

08000468 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000468:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800046a:	f7ff ffb1 	bl	80003d0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800046e:	bd10      	pop	{r4, pc}

08000470 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000470:	b510      	push	{r4, lr}
   return SysTick_Config(TicksNumb);
 8000472:	f7ff ffdd 	bl	8000430 <SysTick_Config>
}
 8000476:	bd10      	pop	{r4, pc}

08000478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000478:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047a:	4b0a      	ldr	r3, [pc, #40]	@ (80004a4 <HAL_MspInit+0x2c>)
 800047c:	6999      	ldr	r1, [r3, #24]
 800047e:	2201      	movs	r2, #1
 8000480:	4311      	orrs	r1, r2
 8000482:	6199      	str	r1, [r3, #24]
 8000484:	6999      	ldr	r1, [r3, #24]
 8000486:	400a      	ands	r2, r1
 8000488:	9200      	str	r2, [sp, #0]
 800048a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048c:	69da      	ldr	r2, [r3, #28]
 800048e:	2180      	movs	r1, #128	@ 0x80
 8000490:	0549      	lsls	r1, r1, #21
 8000492:	430a      	orrs	r2, r1
 8000494:	61da      	str	r2, [r3, #28]
 8000496:	69db      	ldr	r3, [r3, #28]
 8000498:	400b      	ands	r3, r1
 800049a:	9301      	str	r3, [sp, #4]
 800049c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049e:	b002      	add	sp, #8
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	40021000 	.word	0x40021000

080004a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80004ae:	d100      	bne.n	80004b2 <HAL_RCC_OscConfig+0xa>
 80004b0:	e22e      	b.n	8000910 <HAL_RCC_OscConfig+0x468>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004b2:	6803      	ldr	r3, [r0, #0]
 80004b4:	07db      	lsls	r3, r3, #31
 80004b6:	d526      	bpl.n	8000506 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004b8:	4bae      	ldr	r3, [pc, #696]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 80004ba:	685a      	ldr	r2, [r3, #4]
 80004bc:	230c      	movs	r3, #12
 80004be:	4013      	ands	r3, r2
 80004c0:	2b04      	cmp	r3, #4
 80004c2:	d018      	beq.n	80004f6 <HAL_RCC_OscConfig+0x4e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004c4:	4bab      	ldr	r3, [pc, #684]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 80004c6:	685a      	ldr	r2, [r3, #4]
 80004c8:	230c      	movs	r3, #12
 80004ca:	4013      	ands	r3, r2
 80004cc:	2b08      	cmp	r3, #8
 80004ce:	d00e      	beq.n	80004ee <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004d0:	6863      	ldr	r3, [r4, #4]
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d03c      	beq.n	8000550 <HAL_RCC_OscConfig+0xa8>
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d151      	bne.n	800057e <HAL_RCC_OscConfig+0xd6>
 80004da:	4ba6      	ldr	r3, [pc, #664]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	49a6      	ldr	r1, [pc, #664]	@ (8000778 <HAL_RCC_OscConfig+0x2d0>)
 80004e0:	400a      	ands	r2, r1
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	49a5      	ldr	r1, [pc, #660]	@ (800077c <HAL_RCC_OscConfig+0x2d4>)
 80004e8:	400a      	ands	r2, r1
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	e036      	b.n	800055c <HAL_RCC_OscConfig+0xb4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004ee:	4ba1      	ldr	r3, [pc, #644]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	03db      	lsls	r3, r3, #15
 80004f4:	d5ec      	bpl.n	80004d0 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004f6:	4b9f      	ldr	r3, [pc, #636]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	039b      	lsls	r3, r3, #14
 80004fc:	d503      	bpl.n	8000506 <HAL_RCC_OscConfig+0x5e>
 80004fe:	6863      	ldr	r3, [r4, #4]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d100      	bne.n	8000506 <HAL_RCC_OscConfig+0x5e>
 8000504:	e207      	b.n	8000916 <HAL_RCC_OscConfig+0x46e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000506:	6823      	ldr	r3, [r4, #0]
 8000508:	079b      	lsls	r3, r3, #30
 800050a:	d572      	bpl.n	80005f2 <HAL_RCC_OscConfig+0x14a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800050c:	4b99      	ldr	r3, [pc, #612]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	220c      	movs	r2, #12
 8000512:	421a      	tst	r2, r3
 8000514:	d05d      	beq.n	80005d2 <HAL_RCC_OscConfig+0x12a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000516:	4b97      	ldr	r3, [pc, #604]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 8000518:	685a      	ldr	r2, [r3, #4]
 800051a:	230c      	movs	r3, #12
 800051c:	4013      	ands	r3, r2
 800051e:	2b08      	cmp	r3, #8
 8000520:	d053      	beq.n	80005ca <HAL_RCC_OscConfig+0x122>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000522:	68e3      	ldr	r3, [r4, #12]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d100      	bne.n	800052a <HAL_RCC_OscConfig+0x82>
 8000528:	e085      	b.n	8000636 <HAL_RCC_OscConfig+0x18e>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800052a:	4a92      	ldr	r2, [pc, #584]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 800052c:	6813      	ldr	r3, [r2, #0]
 800052e:	2101      	movs	r1, #1
 8000530:	430b      	orrs	r3, r1
 8000532:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000534:	f7ff ff46 	bl	80003c4 <HAL_GetTick>
 8000538:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800053a:	4b8e      	ldr	r3, [pc, #568]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	079b      	lsls	r3, r3, #30
 8000540:	d470      	bmi.n	8000624 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000542:	f7ff ff3f 	bl	80003c4 <HAL_GetTick>
 8000546:	1b40      	subs	r0, r0, r5
 8000548:	2802      	cmp	r0, #2
 800054a:	d9f6      	bls.n	800053a <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 800054c:	2003      	movs	r0, #3
 800054e:	e1e0      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000550:	4a88      	ldr	r2, [pc, #544]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 8000552:	6811      	ldr	r1, [r2, #0]
 8000554:	2380      	movs	r3, #128	@ 0x80
 8000556:	025b      	lsls	r3, r3, #9
 8000558:	430b      	orrs	r3, r1
 800055a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800055c:	6863      	ldr	r3, [r4, #4]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d025      	beq.n	80005ae <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8000562:	f7ff ff2f 	bl	80003c4 <HAL_GetTick>
 8000566:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000568:	4b82      	ldr	r3, [pc, #520]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	039b      	lsls	r3, r3, #14
 800056e:	d4ca      	bmi.n	8000506 <HAL_RCC_OscConfig+0x5e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000570:	f7ff ff28 	bl	80003c4 <HAL_GetTick>
 8000574:	1b40      	subs	r0, r0, r5
 8000576:	2864      	cmp	r0, #100	@ 0x64
 8000578:	d9f6      	bls.n	8000568 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 800057a:	2003      	movs	r0, #3
 800057c:	e1c9      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800057e:	2b05      	cmp	r3, #5
 8000580:	d009      	beq.n	8000596 <HAL_RCC_OscConfig+0xee>
 8000582:	4b7c      	ldr	r3, [pc, #496]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	497c      	ldr	r1, [pc, #496]	@ (8000778 <HAL_RCC_OscConfig+0x2d0>)
 8000588:	400a      	ands	r2, r1
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	497b      	ldr	r1, [pc, #492]	@ (800077c <HAL_RCC_OscConfig+0x2d4>)
 8000590:	400a      	ands	r2, r1
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	e7e2      	b.n	800055c <HAL_RCC_OscConfig+0xb4>
 8000596:	4b77      	ldr	r3, [pc, #476]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 8000598:	6819      	ldr	r1, [r3, #0]
 800059a:	2280      	movs	r2, #128	@ 0x80
 800059c:	02d2      	lsls	r2, r2, #11
 800059e:	430a      	orrs	r2, r1
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	6819      	ldr	r1, [r3, #0]
 80005a4:	2280      	movs	r2, #128	@ 0x80
 80005a6:	0252      	lsls	r2, r2, #9
 80005a8:	430a      	orrs	r2, r1
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	e7d6      	b.n	800055c <HAL_RCC_OscConfig+0xb4>
        tickstart = HAL_GetTick();
 80005ae:	f7ff ff09 	bl	80003c4 <HAL_GetTick>
 80005b2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005b4:	4b6f      	ldr	r3, [pc, #444]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	039b      	lsls	r3, r3, #14
 80005ba:	d5a4      	bpl.n	8000506 <HAL_RCC_OscConfig+0x5e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005bc:	f7ff ff02 	bl	80003c4 <HAL_GetTick>
 80005c0:	1b40      	subs	r0, r0, r5
 80005c2:	2864      	cmp	r0, #100	@ 0x64
 80005c4:	d9f6      	bls.n	80005b4 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 80005c6:	2003      	movs	r0, #3
 80005c8:	e1a3      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80005ca:	4b6a      	ldr	r3, [pc, #424]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	03db      	lsls	r3, r3, #15
 80005d0:	d4a7      	bmi.n	8000522 <HAL_RCC_OscConfig+0x7a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005d2:	4b68      	ldr	r3, [pc, #416]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	079b      	lsls	r3, r3, #30
 80005d8:	d503      	bpl.n	80005e2 <HAL_RCC_OscConfig+0x13a>
 80005da:	68e3      	ldr	r3, [r4, #12]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d000      	beq.n	80005e2 <HAL_RCC_OscConfig+0x13a>
 80005e0:	e19b      	b.n	800091a <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005e2:	4964      	ldr	r1, [pc, #400]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 80005e4:	680b      	ldr	r3, [r1, #0]
 80005e6:	22f8      	movs	r2, #248	@ 0xf8
 80005e8:	4393      	bics	r3, r2
 80005ea:	6922      	ldr	r2, [r4, #16]
 80005ec:	00d2      	lsls	r2, r2, #3
 80005ee:	4313      	orrs	r3, r2
 80005f0:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005f2:	6823      	ldr	r3, [r4, #0]
 80005f4:	071b      	lsls	r3, r3, #28
 80005f6:	d544      	bpl.n	8000682 <HAL_RCC_OscConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005f8:	69e3      	ldr	r3, [r4, #28]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d02e      	beq.n	800065c <HAL_RCC_OscConfig+0x1b4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80005fe:	4a5d      	ldr	r2, [pc, #372]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 8000600:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8000602:	2101      	movs	r1, #1
 8000604:	430b      	orrs	r3, r1
 8000606:	6253      	str	r3, [r2, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000608:	f7ff fedc 	bl	80003c4 <HAL_GetTick>
 800060c:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800060e:	4b59      	ldr	r3, [pc, #356]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 8000610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000612:	079b      	lsls	r3, r3, #30
 8000614:	d435      	bmi.n	8000682 <HAL_RCC_OscConfig+0x1da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000616:	f7ff fed5 	bl	80003c4 <HAL_GetTick>
 800061a:	1b40      	subs	r0, r0, r5
 800061c:	2802      	cmp	r0, #2
 800061e:	d9f6      	bls.n	800060e <HAL_RCC_OscConfig+0x166>
        {
          return HAL_TIMEOUT;
 8000620:	2003      	movs	r0, #3
 8000622:	e176      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000624:	4953      	ldr	r1, [pc, #332]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 8000626:	680b      	ldr	r3, [r1, #0]
 8000628:	22f8      	movs	r2, #248	@ 0xf8
 800062a:	4393      	bics	r3, r2
 800062c:	6922      	ldr	r2, [r4, #16]
 800062e:	00d2      	lsls	r2, r2, #3
 8000630:	4313      	orrs	r3, r2
 8000632:	600b      	str	r3, [r1, #0]
 8000634:	e7dd      	b.n	80005f2 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 8000636:	4a4f      	ldr	r2, [pc, #316]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 8000638:	6813      	ldr	r3, [r2, #0]
 800063a:	2101      	movs	r1, #1
 800063c:	438b      	bics	r3, r1
 800063e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000640:	f7ff fec0 	bl	80003c4 <HAL_GetTick>
 8000644:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000646:	4b4b      	ldr	r3, [pc, #300]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	079b      	lsls	r3, r3, #30
 800064c:	d5d1      	bpl.n	80005f2 <HAL_RCC_OscConfig+0x14a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800064e:	f7ff feb9 	bl	80003c4 <HAL_GetTick>
 8000652:	1b40      	subs	r0, r0, r5
 8000654:	2802      	cmp	r0, #2
 8000656:	d9f6      	bls.n	8000646 <HAL_RCC_OscConfig+0x19e>
            return HAL_TIMEOUT;
 8000658:	2003      	movs	r0, #3
 800065a:	e15a      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800065c:	4a45      	ldr	r2, [pc, #276]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 800065e:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8000660:	2101      	movs	r1, #1
 8000662:	438b      	bics	r3, r1
 8000664:	6253      	str	r3, [r2, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000666:	f7ff fead 	bl	80003c4 <HAL_GetTick>
 800066a:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800066c:	4b41      	ldr	r3, [pc, #260]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 800066e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000670:	079b      	lsls	r3, r3, #30
 8000672:	d506      	bpl.n	8000682 <HAL_RCC_OscConfig+0x1da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000674:	f7ff fea6 	bl	80003c4 <HAL_GetTick>
 8000678:	1b40      	subs	r0, r0, r5
 800067a:	2802      	cmp	r0, #2
 800067c:	d9f6      	bls.n	800066c <HAL_RCC_OscConfig+0x1c4>
        {
          return HAL_TIMEOUT;
 800067e:	2003      	movs	r0, #3
 8000680:	e147      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000682:	6823      	ldr	r3, [r4, #0]
 8000684:	075b      	lsls	r3, r3, #29
 8000686:	d400      	bmi.n	800068a <HAL_RCC_OscConfig+0x1e2>
 8000688:	e080      	b.n	800078c <HAL_RCC_OscConfig+0x2e4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800068a:	4b3a      	ldr	r3, [pc, #232]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	d41d      	bmi.n	80006ce <HAL_RCC_OscConfig+0x226>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	4b38      	ldr	r3, [pc, #224]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 8000694:	69da      	ldr	r2, [r3, #28]
 8000696:	2180      	movs	r1, #128	@ 0x80
 8000698:	0549      	lsls	r1, r1, #21
 800069a:	430a      	orrs	r2, r1
 800069c:	61da      	str	r2, [r3, #28]
 800069e:	69db      	ldr	r3, [r3, #28]
 80006a0:	400b      	ands	r3, r1
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80006a6:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006a8:	4b35      	ldr	r3, [pc, #212]	@ (8000780 <HAL_RCC_OscConfig+0x2d8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	d510      	bpl.n	80006d2 <HAL_RCC_OscConfig+0x22a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006b0:	68a3      	ldr	r3, [r4, #8]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d021      	beq.n	80006fa <HAL_RCC_OscConfig+0x252>
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d136      	bne.n	8000728 <HAL_RCC_OscConfig+0x280>
 80006ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 80006bc:	6a1a      	ldr	r2, [r3, #32]
 80006be:	2101      	movs	r1, #1
 80006c0:	438a      	bics	r2, r1
 80006c2:	621a      	str	r2, [r3, #32]
 80006c4:	6a1a      	ldr	r2, [r3, #32]
 80006c6:	3103      	adds	r1, #3
 80006c8:	438a      	bics	r2, r1
 80006ca:	621a      	str	r2, [r3, #32]
 80006cc:	e01a      	b.n	8000704 <HAL_RCC_OscConfig+0x25c>
    FlagStatus       pwrclkchanged = RESET;
 80006ce:	2500      	movs	r5, #0
 80006d0:	e7ea      	b.n	80006a8 <HAL_RCC_OscConfig+0x200>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006d2:	4a2b      	ldr	r2, [pc, #172]	@ (8000780 <HAL_RCC_OscConfig+0x2d8>)
 80006d4:	6811      	ldr	r1, [r2, #0]
 80006d6:	2380      	movs	r3, #128	@ 0x80
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	430b      	orrs	r3, r1
 80006dc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80006de:	f7ff fe71 	bl	80003c4 <HAL_GetTick>
 80006e2:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006e4:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <HAL_RCC_OscConfig+0x2d8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	d4e1      	bmi.n	80006b0 <HAL_RCC_OscConfig+0x208>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006ec:	f7ff fe6a 	bl	80003c4 <HAL_GetTick>
 80006f0:	1b80      	subs	r0, r0, r6
 80006f2:	2864      	cmp	r0, #100	@ 0x64
 80006f4:	d9f6      	bls.n	80006e4 <HAL_RCC_OscConfig+0x23c>
          return HAL_TIMEOUT;
 80006f6:	2003      	movs	r0, #3
 80006f8:	e10b      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 80006fc:	6a13      	ldr	r3, [r2, #32]
 80006fe:	2101      	movs	r1, #1
 8000700:	430b      	orrs	r3, r1
 8000702:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000704:	68a3      	ldr	r3, [r4, #8]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d024      	beq.n	8000754 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800070a:	f7ff fe5b 	bl	80003c4 <HAL_GetTick>
 800070e:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 8000712:	6a1b      	ldr	r3, [r3, #32]
 8000714:	079b      	lsls	r3, r3, #30
 8000716:	d437      	bmi.n	8000788 <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000718:	f7ff fe54 	bl	80003c4 <HAL_GetTick>
 800071c:	1b80      	subs	r0, r0, r6
 800071e:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <HAL_RCC_OscConfig+0x2dc>)
 8000720:	4298      	cmp	r0, r3
 8000722:	d9f5      	bls.n	8000710 <HAL_RCC_OscConfig+0x268>
        {
          return HAL_TIMEOUT;
 8000724:	2003      	movs	r0, #3
 8000726:	e0f4      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000728:	2b05      	cmp	r3, #5
 800072a:	d009      	beq.n	8000740 <HAL_RCC_OscConfig+0x298>
 800072c:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 800072e:	6a1a      	ldr	r2, [r3, #32]
 8000730:	2101      	movs	r1, #1
 8000732:	438a      	bics	r2, r1
 8000734:	621a      	str	r2, [r3, #32]
 8000736:	6a1a      	ldr	r2, [r3, #32]
 8000738:	3103      	adds	r1, #3
 800073a:	438a      	bics	r2, r1
 800073c:	621a      	str	r2, [r3, #32]
 800073e:	e7e1      	b.n	8000704 <HAL_RCC_OscConfig+0x25c>
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 8000742:	6a1a      	ldr	r2, [r3, #32]
 8000744:	2104      	movs	r1, #4
 8000746:	430a      	orrs	r2, r1
 8000748:	621a      	str	r2, [r3, #32]
 800074a:	6a1a      	ldr	r2, [r3, #32]
 800074c:	3903      	subs	r1, #3
 800074e:	430a      	orrs	r2, r1
 8000750:	621a      	str	r2, [r3, #32]
 8000752:	e7d7      	b.n	8000704 <HAL_RCC_OscConfig+0x25c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000754:	f7ff fe36 	bl	80003c4 <HAL_GetTick>
 8000758:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <HAL_RCC_OscConfig+0x2cc>)
 800075c:	6a1b      	ldr	r3, [r3, #32]
 800075e:	079b      	lsls	r3, r3, #30
 8000760:	d512      	bpl.n	8000788 <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000762:	f7ff fe2f 	bl	80003c4 <HAL_GetTick>
 8000766:	1b80      	subs	r0, r0, r6
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_RCC_OscConfig+0x2dc>)
 800076a:	4298      	cmp	r0, r3
 800076c:	d9f5      	bls.n	800075a <HAL_RCC_OscConfig+0x2b2>
        {
          return HAL_TIMEOUT;
 800076e:	2003      	movs	r0, #3
 8000770:	e0cf      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	40021000 	.word	0x40021000
 8000778:	fffeffff 	.word	0xfffeffff
 800077c:	fffbffff 	.word	0xfffbffff
 8000780:	40007000 	.word	0x40007000
 8000784:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000788:	2d01      	cmp	r5, #1
 800078a:	d033      	beq.n	80007f4 <HAL_RCC_OscConfig+0x34c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	06db      	lsls	r3, r3, #27
 8000790:	d510      	bpl.n	80007b4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000792:	6963      	ldr	r3, [r4, #20]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d033      	beq.n	8000800 <HAL_RCC_OscConfig+0x358>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000798:	3305      	adds	r3, #5
 800079a:	d151      	bne.n	8000840 <HAL_RCC_OscConfig+0x398>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800079c:	4a65      	ldr	r2, [pc, #404]	@ (8000934 <HAL_RCC_OscConfig+0x48c>)
 800079e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80007a0:	2104      	movs	r1, #4
 80007a2:	438b      	bics	r3, r1
 80007a4:	6353      	str	r3, [r2, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80007a6:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80007a8:	31f4      	adds	r1, #244	@ 0xf4
 80007aa:	438b      	bics	r3, r1
 80007ac:	69a1      	ldr	r1, [r4, #24]
 80007ae:	00c9      	lsls	r1, r1, #3
 80007b0:	430b      	orrs	r3, r1
 80007b2:	6353      	str	r3, [r2, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007b4:	6a23      	ldr	r3, [r4, #32]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d100      	bne.n	80007bc <HAL_RCC_OscConfig+0x314>
 80007ba:	e0b0      	b.n	800091e <HAL_RCC_OscConfig+0x476>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007bc:	4a5d      	ldr	r2, [pc, #372]	@ (8000934 <HAL_RCC_OscConfig+0x48c>)
 80007be:	6851      	ldr	r1, [r2, #4]
 80007c0:	220c      	movs	r2, #12
 80007c2:	400a      	ands	r2, r1
 80007c4:	2a08      	cmp	r2, #8
 80007c6:	d100      	bne.n	80007ca <HAL_RCC_OscConfig+0x322>
 80007c8:	e08a      	b.n	80008e0 <HAL_RCC_OscConfig+0x438>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d04f      	beq.n	800086e <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80007ce:	4a59      	ldr	r2, [pc, #356]	@ (8000934 <HAL_RCC_OscConfig+0x48c>)
 80007d0:	6813      	ldr	r3, [r2, #0]
 80007d2:	4959      	ldr	r1, [pc, #356]	@ (8000938 <HAL_RCC_OscConfig+0x490>)
 80007d4:	400b      	ands	r3, r1
 80007d6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007d8:	f7ff fdf4 	bl	80003c4 <HAL_GetTick>
 80007dc:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007de:	4b55      	ldr	r3, [pc, #340]	@ (8000934 <HAL_RCC_OscConfig+0x48c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	019b      	lsls	r3, r3, #6
 80007e4:	d57a      	bpl.n	80008dc <HAL_RCC_OscConfig+0x434>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007e6:	f7ff fded 	bl	80003c4 <HAL_GetTick>
 80007ea:	1b00      	subs	r0, r0, r4
 80007ec:	2802      	cmp	r0, #2
 80007ee:	d9f6      	bls.n	80007de <HAL_RCC_OscConfig+0x336>
          {
            return HAL_TIMEOUT;
 80007f0:	2003      	movs	r0, #3
 80007f2:	e08e      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007f4:	4a4f      	ldr	r2, [pc, #316]	@ (8000934 <HAL_RCC_OscConfig+0x48c>)
 80007f6:	69d3      	ldr	r3, [r2, #28]
 80007f8:	4950      	ldr	r1, [pc, #320]	@ (800093c <HAL_RCC_OscConfig+0x494>)
 80007fa:	400b      	ands	r3, r1
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	e7c5      	b.n	800078c <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000800:	4b4c      	ldr	r3, [pc, #304]	@ (8000934 <HAL_RCC_OscConfig+0x48c>)
 8000802:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000804:	2104      	movs	r1, #4
 8000806:	430a      	orrs	r2, r1
 8000808:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 800080a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800080c:	3903      	subs	r1, #3
 800080e:	430a      	orrs	r2, r1
 8000810:	635a      	str	r2, [r3, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8000812:	f7ff fdd7 	bl	80003c4 <HAL_GetTick>
 8000816:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000818:	4b46      	ldr	r3, [pc, #280]	@ (8000934 <HAL_RCC_OscConfig+0x48c>)
 800081a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800081c:	079b      	lsls	r3, r3, #30
 800081e:	d406      	bmi.n	800082e <HAL_RCC_OscConfig+0x386>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000820:	f7ff fdd0 	bl	80003c4 <HAL_GetTick>
 8000824:	1b40      	subs	r0, r0, r5
 8000826:	2802      	cmp	r0, #2
 8000828:	d9f6      	bls.n	8000818 <HAL_RCC_OscConfig+0x370>
          return HAL_TIMEOUT;
 800082a:	2003      	movs	r0, #3
 800082c:	e071      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800082e:	4941      	ldr	r1, [pc, #260]	@ (8000934 <HAL_RCC_OscConfig+0x48c>)
 8000830:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8000832:	22f8      	movs	r2, #248	@ 0xf8
 8000834:	4393      	bics	r3, r2
 8000836:	69a2      	ldr	r2, [r4, #24]
 8000838:	00d2      	lsls	r2, r2, #3
 800083a:	4313      	orrs	r3, r2
 800083c:	634b      	str	r3, [r1, #52]	@ 0x34
 800083e:	e7b9      	b.n	80007b4 <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000840:	4b3c      	ldr	r3, [pc, #240]	@ (8000934 <HAL_RCC_OscConfig+0x48c>)
 8000842:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000844:	2104      	movs	r1, #4
 8000846:	430a      	orrs	r2, r1
 8000848:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 800084a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800084c:	3903      	subs	r1, #3
 800084e:	438a      	bics	r2, r1
 8000850:	635a      	str	r2, [r3, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8000852:	f7ff fdb7 	bl	80003c4 <HAL_GetTick>
 8000856:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000858:	4b36      	ldr	r3, [pc, #216]	@ (8000934 <HAL_RCC_OscConfig+0x48c>)
 800085a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800085c:	079b      	lsls	r3, r3, #30
 800085e:	d5a9      	bpl.n	80007b4 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000860:	f7ff fdb0 	bl	80003c4 <HAL_GetTick>
 8000864:	1b40      	subs	r0, r0, r5
 8000866:	2802      	cmp	r0, #2
 8000868:	d9f6      	bls.n	8000858 <HAL_RCC_OscConfig+0x3b0>
          return HAL_TIMEOUT;
 800086a:	2003      	movs	r0, #3
 800086c:	e051      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
        __HAL_RCC_PLL_DISABLE();
 800086e:	4a31      	ldr	r2, [pc, #196]	@ (8000934 <HAL_RCC_OscConfig+0x48c>)
 8000870:	6813      	ldr	r3, [r2, #0]
 8000872:	4931      	ldr	r1, [pc, #196]	@ (8000938 <HAL_RCC_OscConfig+0x490>)
 8000874:	400b      	ands	r3, r1
 8000876:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000878:	f7ff fda4 	bl	80003c4 <HAL_GetTick>
 800087c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800087e:	4b2d      	ldr	r3, [pc, #180]	@ (8000934 <HAL_RCC_OscConfig+0x48c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	019b      	lsls	r3, r3, #6
 8000884:	d506      	bpl.n	8000894 <HAL_RCC_OscConfig+0x3ec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000886:	f7ff fd9d 	bl	80003c4 <HAL_GetTick>
 800088a:	1b40      	subs	r0, r0, r5
 800088c:	2802      	cmp	r0, #2
 800088e:	d9f6      	bls.n	800087e <HAL_RCC_OscConfig+0x3d6>
            return HAL_TIMEOUT;
 8000890:	2003      	movs	r0, #3
 8000892:	e03e      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000894:	4b27      	ldr	r3, [pc, #156]	@ (8000934 <HAL_RCC_OscConfig+0x48c>)
 8000896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000898:	210f      	movs	r1, #15
 800089a:	438a      	bics	r2, r1
 800089c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800089e:	430a      	orrs	r2, r1
 80008a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008a2:	685a      	ldr	r2, [r3, #4]
 80008a4:	4926      	ldr	r1, [pc, #152]	@ (8000940 <HAL_RCC_OscConfig+0x498>)
 80008a6:	400a      	ands	r2, r1
 80008a8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80008aa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80008ac:	4301      	orrs	r1, r0
 80008ae:	430a      	orrs	r2, r1
 80008b0:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80008b2:	6819      	ldr	r1, [r3, #0]
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	0452      	lsls	r2, r2, #17
 80008b8:	430a      	orrs	r2, r1
 80008ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008bc:	f7ff fd82 	bl	80003c4 <HAL_GetTick>
 80008c0:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000934 <HAL_RCC_OscConfig+0x48c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	019b      	lsls	r3, r3, #6
 80008c8:	d406      	bmi.n	80008d8 <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008ca:	f7ff fd7b 	bl	80003c4 <HAL_GetTick>
 80008ce:	1b00      	subs	r0, r0, r4
 80008d0:	2802      	cmp	r0, #2
 80008d2:	d9f6      	bls.n	80008c2 <HAL_RCC_OscConfig+0x41a>
            return HAL_TIMEOUT;
 80008d4:	2003      	movs	r0, #3
 80008d6:	e01c      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
  }

  return HAL_OK;
 80008d8:	2000      	movs	r0, #0
 80008da:	e01a      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
 80008dc:	2000      	movs	r0, #0
 80008de:	e018      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d01e      	beq.n	8000922 <HAL_RCC_OscConfig+0x47a>
        pll_config  = RCC->CFGR;
 80008e4:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <HAL_RCC_OscConfig+0x48c>)
 80008e6:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 80008e8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80008ea:	2380      	movs	r3, #128	@ 0x80
 80008ec:	025b      	lsls	r3, r3, #9
 80008ee:	4013      	ands	r3, r2
 80008f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80008f2:	428b      	cmp	r3, r1
 80008f4:	d117      	bne.n	8000926 <HAL_RCC_OscConfig+0x47e>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80008f6:	230f      	movs	r3, #15
 80008f8:	4003      	ands	r3, r0
 80008fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80008fc:	428b      	cmp	r3, r1
 80008fe:	d114      	bne.n	800092a <HAL_RCC_OscConfig+0x482>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000900:	23f0      	movs	r3, #240	@ 0xf0
 8000902:	039b      	lsls	r3, r3, #14
 8000904:	401a      	ands	r2, r3
 8000906:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000908:	429a      	cmp	r2, r3
 800090a:	d110      	bne.n	800092e <HAL_RCC_OscConfig+0x486>
  return HAL_OK;
 800090c:	2000      	movs	r0, #0
 800090e:	e000      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
    return HAL_ERROR;
 8000910:	2001      	movs	r0, #1
}
 8000912:	b002      	add	sp, #8
 8000914:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000916:	2001      	movs	r0, #1
 8000918:	e7fb      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
        return HAL_ERROR;
 800091a:	2001      	movs	r0, #1
 800091c:	e7f9      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
  return HAL_OK;
 800091e:	2000      	movs	r0, #0
 8000920:	e7f7      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
        return HAL_ERROR;
 8000922:	2001      	movs	r0, #1
 8000924:	e7f5      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
          return HAL_ERROR;
 8000926:	2001      	movs	r0, #1
 8000928:	e7f3      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
 800092a:	2001      	movs	r0, #1
 800092c:	e7f1      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
 800092e:	2001      	movs	r0, #1
 8000930:	e7ef      	b.n	8000912 <HAL_RCC_OscConfig+0x46a>
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	40021000 	.word	0x40021000
 8000938:	feffffff 	.word	0xfeffffff
 800093c:	efffffff 	.word	0xefffffff
 8000940:	ffc2ffff 	.word	0xffc2ffff

08000944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000944:	b510      	push	{r4, lr}
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000946:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <HAL_RCC_GetSysClockFreq+0x44>)
 8000948:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800094a:	230c      	movs	r3, #12
 800094c:	4013      	ands	r3, r2
 800094e:	2b08      	cmp	r3, #8
 8000950:	d001      	beq.n	8000956 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000952:	480e      	ldr	r0, [pc, #56]	@ (800098c <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000954:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000956:	0c91      	lsrs	r1, r2, #18
 8000958:	3307      	adds	r3, #7
 800095a:	4019      	ands	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	@ (8000990 <HAL_RCC_GetSysClockFreq+0x4c>)
 800095e:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000960:	4909      	ldr	r1, [pc, #36]	@ (8000988 <HAL_RCC_GetSysClockFreq+0x44>)
 8000962:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 8000964:	400b      	ands	r3, r1
 8000966:	490b      	ldr	r1, [pc, #44]	@ (8000994 <HAL_RCC_GetSysClockFreq+0x50>)
 8000968:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800096a:	03d2      	lsls	r2, r2, #15
 800096c:	d504      	bpl.n	8000978 <HAL_RCC_GetSysClockFreq+0x34>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800096e:	4807      	ldr	r0, [pc, #28]	@ (800098c <HAL_RCC_GetSysClockFreq+0x48>)
 8000970:	f7ff fbe6 	bl	8000140 <__udivsi3>
 8000974:	4360      	muls	r0, r4
 8000976:	e7ed      	b.n	8000954 <HAL_RCC_GetSysClockFreq+0x10>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000978:	0162      	lsls	r2, r4, #5
 800097a:	1b12      	subs	r2, r2, r4
 800097c:	0193      	lsls	r3, r2, #6
 800097e:	1a9b      	subs	r3, r3, r2
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	191b      	adds	r3, r3, r4
 8000984:	0218      	lsls	r0, r3, #8
 8000986:	e7e5      	b.n	8000954 <HAL_RCC_GetSysClockFreq+0x10>
 8000988:	40021000 	.word	0x40021000
 800098c:	007a1200 	.word	0x007a1200
 8000990:	08000bb4 	.word	0x08000bb4
 8000994:	08000ba4 	.word	0x08000ba4

08000998 <HAL_RCC_ClockConfig>:
{
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	0004      	movs	r4, r0
 800099c:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800099e:	2800      	cmp	r0, #0
 80009a0:	d100      	bne.n	80009a4 <HAL_RCC_ClockConfig+0xc>
 80009a2:	e07e      	b.n	8000aa2 <HAL_RCC_ClockConfig+0x10a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80009a4:	4b43      	ldr	r3, [pc, #268]	@ (8000ab4 <HAL_RCC_ClockConfig+0x11c>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	2301      	movs	r3, #1
 80009aa:	4013      	ands	r3, r2
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d20a      	bcs.n	80009c6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009b0:	4940      	ldr	r1, [pc, #256]	@ (8000ab4 <HAL_RCC_ClockConfig+0x11c>)
 80009b2:	680b      	ldr	r3, [r1, #0]
 80009b4:	2201      	movs	r2, #1
 80009b6:	4393      	bics	r3, r2
 80009b8:	432b      	orrs	r3, r5
 80009ba:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80009bc:	680b      	ldr	r3, [r1, #0]
 80009be:	401a      	ands	r2, r3
 80009c0:	42aa      	cmp	r2, r5
 80009c2:	d000      	beq.n	80009c6 <HAL_RCC_ClockConfig+0x2e>
 80009c4:	e06f      	b.n	8000aa6 <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	079a      	lsls	r2, r3, #30
 80009ca:	d50e      	bpl.n	80009ea <HAL_RCC_ClockConfig+0x52>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009cc:	075b      	lsls	r3, r3, #29
 80009ce:	d505      	bpl.n	80009dc <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80009d0:	4a39      	ldr	r2, [pc, #228]	@ (8000ab8 <HAL_RCC_ClockConfig+0x120>)
 80009d2:	6851      	ldr	r1, [r2, #4]
 80009d4:	23e0      	movs	r3, #224	@ 0xe0
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	430b      	orrs	r3, r1
 80009da:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009dc:	4a36      	ldr	r2, [pc, #216]	@ (8000ab8 <HAL_RCC_ClockConfig+0x120>)
 80009de:	6853      	ldr	r3, [r2, #4]
 80009e0:	21f0      	movs	r1, #240	@ 0xf0
 80009e2:	438b      	bics	r3, r1
 80009e4:	68a1      	ldr	r1, [r4, #8]
 80009e6:	430b      	orrs	r3, r1
 80009e8:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009ea:	6823      	ldr	r3, [r4, #0]
 80009ec:	07db      	lsls	r3, r3, #31
 80009ee:	d52d      	bpl.n	8000a4c <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009f0:	6863      	ldr	r3, [r4, #4]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d01e      	beq.n	8000a34 <HAL_RCC_ClockConfig+0x9c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d022      	beq.n	8000a40 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009fa:	4a2f      	ldr	r2, [pc, #188]	@ (8000ab8 <HAL_RCC_ClockConfig+0x120>)
 80009fc:	6812      	ldr	r2, [r2, #0]
 80009fe:	0792      	lsls	r2, r2, #30
 8000a00:	d553      	bpl.n	8000aaa <HAL_RCC_ClockConfig+0x112>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a02:	492d      	ldr	r1, [pc, #180]	@ (8000ab8 <HAL_RCC_ClockConfig+0x120>)
 8000a04:	684a      	ldr	r2, [r1, #4]
 8000a06:	2003      	movs	r0, #3
 8000a08:	4382      	bics	r2, r0
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000a0e:	f7ff fcd9 	bl	80003c4 <HAL_GetTick>
 8000a12:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000a14:	4b28      	ldr	r3, [pc, #160]	@ (8000ab8 <HAL_RCC_ClockConfig+0x120>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	220c      	movs	r2, #12
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	6863      	ldr	r3, [r4, #4]
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d013      	beq.n	8000a4c <HAL_RCC_ClockConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a24:	f7ff fcce 	bl	80003c4 <HAL_GetTick>
 8000a28:	1b80      	subs	r0, r0, r6
 8000a2a:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <HAL_RCC_ClockConfig+0x124>)
 8000a2c:	4298      	cmp	r0, r3
 8000a2e:	d9f1      	bls.n	8000a14 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8000a30:	2003      	movs	r0, #3
 8000a32:	e035      	b.n	8000aa0 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a34:	4a20      	ldr	r2, [pc, #128]	@ (8000ab8 <HAL_RCC_ClockConfig+0x120>)
 8000a36:	6812      	ldr	r2, [r2, #0]
 8000a38:	0392      	lsls	r2, r2, #14
 8000a3a:	d4e2      	bmi.n	8000a02 <HAL_RCC_ClockConfig+0x6a>
        return HAL_ERROR;
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	e02f      	b.n	8000aa0 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a40:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab8 <HAL_RCC_ClockConfig+0x120>)
 8000a42:	6812      	ldr	r2, [r2, #0]
 8000a44:	0192      	lsls	r2, r2, #6
 8000a46:	d4dc      	bmi.n	8000a02 <HAL_RCC_ClockConfig+0x6a>
        return HAL_ERROR;
 8000a48:	2001      	movs	r0, #1
 8000a4a:	e029      	b.n	8000aa0 <HAL_RCC_ClockConfig+0x108>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000a4c:	4b19      	ldr	r3, [pc, #100]	@ (8000ab4 <HAL_RCC_ClockConfig+0x11c>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	2301      	movs	r3, #1
 8000a52:	4013      	ands	r3, r2
 8000a54:	42ab      	cmp	r3, r5
 8000a56:	d909      	bls.n	8000a6c <HAL_RCC_ClockConfig+0xd4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a58:	4916      	ldr	r1, [pc, #88]	@ (8000ab4 <HAL_RCC_ClockConfig+0x11c>)
 8000a5a:	680b      	ldr	r3, [r1, #0]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4393      	bics	r3, r2
 8000a60:	432b      	orrs	r3, r5
 8000a62:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a64:	680b      	ldr	r3, [r1, #0]
 8000a66:	401a      	ands	r2, r3
 8000a68:	42aa      	cmp	r2, r5
 8000a6a:	d120      	bne.n	8000aae <HAL_RCC_ClockConfig+0x116>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a6c:	6823      	ldr	r3, [r4, #0]
 8000a6e:	075b      	lsls	r3, r3, #29
 8000a70:	d506      	bpl.n	8000a80 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000a72:	4a11      	ldr	r2, [pc, #68]	@ (8000ab8 <HAL_RCC_ClockConfig+0x120>)
 8000a74:	6853      	ldr	r3, [r2, #4]
 8000a76:	4912      	ldr	r1, [pc, #72]	@ (8000ac0 <HAL_RCC_ClockConfig+0x128>)
 8000a78:	400b      	ands	r3, r1
 8000a7a:	68e1      	ldr	r1, [r4, #12]
 8000a7c:	430b      	orrs	r3, r1
 8000a7e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a80:	f7ff ff60 	bl	8000944 <HAL_RCC_GetSysClockFreq>
 8000a84:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <HAL_RCC_ClockConfig+0x120>)
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	0912      	lsrs	r2, r2, #4
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac4 <HAL_RCC_ClockConfig+0x12c>)
 8000a90:	5cd3      	ldrb	r3, [r2, r3]
 8000a92:	40d8      	lsrs	r0, r3
 8000a94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <HAL_RCC_ClockConfig+0x130>)
 8000a96:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f7ff fc4f 	bl	800033c <HAL_InitTick>
  return HAL_OK;
 8000a9e:	2000      	movs	r0, #0
}
 8000aa0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	e7fc      	b.n	8000aa0 <HAL_RCC_ClockConfig+0x108>
      return HAL_ERROR;
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	e7fa      	b.n	8000aa0 <HAL_RCC_ClockConfig+0x108>
        return HAL_ERROR;
 8000aaa:	2001      	movs	r0, #1
 8000aac:	e7f8      	b.n	8000aa0 <HAL_RCC_ClockConfig+0x108>
      return HAL_ERROR;
 8000aae:	2001      	movs	r0, #1
 8000ab0:	e7f6      	b.n	8000aa0 <HAL_RCC_ClockConfig+0x108>
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	40022000 	.word	0x40022000
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	00001388 	.word	0x00001388
 8000ac0:	fffff8ff 	.word	0xfffff8ff
 8000ac4:	08000bc4 	.word	0x08000bc4
 8000ac8:	20000008 	.word	0x20000008

08000acc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <NMI_Handler>

08000ace <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler>

08000ad0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ad0:	4770      	bx	lr

08000ad2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad6:	f7ff fc69 	bl	80003ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ada:	bd10      	pop	{r4, pc}

08000adc <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000adc:	4770      	bx	lr
	...

08000ae0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ae0:	480d      	ldr	r0, [pc, #52]	@ (8000b18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ae2:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000ae4:	f7ff fffa 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae8:	480c      	ldr	r0, [pc, #48]	@ (8000b1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000aea:	490d      	ldr	r1, [pc, #52]	@ (8000b20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aec:	4a0d      	ldr	r2, [pc, #52]	@ (8000b24 <LoopForever+0xe>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af0:	e002      	b.n	8000af8 <LoopCopyDataInit>

08000af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af6:	3304      	adds	r3, #4

08000af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000afc:	d3f9      	bcc.n	8000af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afe:	4a0a      	ldr	r2, [pc, #40]	@ (8000b28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b00:	4c0a      	ldr	r4, [pc, #40]	@ (8000b2c <LoopForever+0x16>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b04:	e001      	b.n	8000b0a <LoopFillZerobss>

08000b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b08:	3204      	adds	r2, #4

08000b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b0c:	d3fb      	bcc.n	8000b06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b0e:	f000 f819 	bl	8000b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b12:	f7ff fc09 	bl	8000328 <main>

08000b16 <LoopForever>:

LoopForever:
    b LoopForever
 8000b16:	e7fe      	b.n	8000b16 <LoopForever>
  ldr   r0, =_estack
 8000b18:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b24:	08000bdc 	.word	0x08000bdc
  ldr r2, =_sbss
 8000b28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b2c:	2000002c 	.word	0x2000002c

08000b30 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC1_COMP_IRQHandler>

08000b32 <memset>:
 8000b32:	0003      	movs	r3, r0
 8000b34:	1882      	adds	r2, r0, r2
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d100      	bne.n	8000b3c <memset+0xa>
 8000b3a:	4770      	bx	lr
 8000b3c:	7019      	strb	r1, [r3, #0]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	e7f9      	b.n	8000b36 <memset+0x4>
	...

08000b44 <__libc_init_array>:
 8000b44:	b570      	push	{r4, r5, r6, lr}
 8000b46:	2600      	movs	r6, #0
 8000b48:	4c0c      	ldr	r4, [pc, #48]	@ (8000b7c <__libc_init_array+0x38>)
 8000b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8000b80 <__libc_init_array+0x3c>)
 8000b4c:	1b64      	subs	r4, r4, r5
 8000b4e:	10a4      	asrs	r4, r4, #2
 8000b50:	42a6      	cmp	r6, r4
 8000b52:	d109      	bne.n	8000b68 <__libc_init_array+0x24>
 8000b54:	2600      	movs	r6, #0
 8000b56:	f000 f819 	bl	8000b8c <_init>
 8000b5a:	4c0a      	ldr	r4, [pc, #40]	@ (8000b84 <__libc_init_array+0x40>)
 8000b5c:	4d0a      	ldr	r5, [pc, #40]	@ (8000b88 <__libc_init_array+0x44>)
 8000b5e:	1b64      	subs	r4, r4, r5
 8000b60:	10a4      	asrs	r4, r4, #2
 8000b62:	42a6      	cmp	r6, r4
 8000b64:	d105      	bne.n	8000b72 <__libc_init_array+0x2e>
 8000b66:	bd70      	pop	{r4, r5, r6, pc}
 8000b68:	00b3      	lsls	r3, r6, #2
 8000b6a:	58eb      	ldr	r3, [r5, r3]
 8000b6c:	4798      	blx	r3
 8000b6e:	3601      	adds	r6, #1
 8000b70:	e7ee      	b.n	8000b50 <__libc_init_array+0xc>
 8000b72:	00b3      	lsls	r3, r6, #2
 8000b74:	58eb      	ldr	r3, [r5, r3]
 8000b76:	4798      	blx	r3
 8000b78:	3601      	adds	r6, #1
 8000b7a:	e7f2      	b.n	8000b62 <__libc_init_array+0x1e>
 8000b7c:	08000bd4 	.word	0x08000bd4
 8000b80:	08000bd4 	.word	0x08000bd4
 8000b84:	08000bd8 	.word	0x08000bd8
 8000b88:	08000bd4 	.word	0x08000bd4

08000b8c <_init>:
 8000b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b92:	bc08      	pop	{r3}
 8000b94:	469e      	mov	lr, r3
 8000b96:	4770      	bx	lr

08000b98 <_fini>:
 8000b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b9e:	bc08      	pop	{r3}
 8000ba0:	469e      	mov	lr, r3
 8000ba2:	4770      	bx	lr
